<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <!--注册log4net（目前注释掉也可以正常使用）-->
  <configSections>
    <section name="log4net" type="log4net.Config.IgnoreSectionHandler"/>
  </configSections>

  <log4net> 
    <!-- 日志默认值节点 -->
    <root>
      <!-- 默认日志对象级别 -->
      <!--(高) OFF > FATAL > ERROR > WARN > INFO > DEBUG > ALL (低) -->
      <level value="all" />
      <!-- 默认日志记录方式 ref为<appender>节点的name属性-->
      <!--<appender-ref ref="MyColoredConsoleAppender"/>-->

      <!--<appender-ref ref="MyRollingFileAppender"/>-->
    </root>
    <!--
    注意！！！
    <root>节点和<logger>节点，如果同时出现，
    会先执行root的内容，再执行logger的内容，
    有可能会出现重复插入记录的情况，
    解决方案：默认节点不设置默认记录方式
    -->
    <!-- 数据库日志 错误-->
    <!--<logger name="logerror">
       --><!--该日志对象的级别（可多个级别设置在一起，公用同一个记录方式）--><!--
      <level value="ERROR"/>
       --><!--该日志对象的记录方式（可多个记录方式设置在一起，同时记录到多种媒介上）--><!-- 
      <appender-ref ref="AdoNetAppender_ERROR"/>
    </logger>-->

    <!-- 数据库日志 提示-->
    <!--<logger name="loginfo">
      <level value="INFO"/>
      <appender-ref ref="AdoNetAppender_Info"/>
    </logger>-->
    <!-- 文本日志 错误-->
    <logger name="logerror">
      <level value="ERROR"/>
      <appender-ref ref="RollingFileAppender_Error"/>
    </logger>
    <!-- 文本日志 提示 -->
    <logger name="loginfo"> 
      <level value="Info"/>
      <appender-ref ref="RollingFileAppender_Info"/>
    </logger>

    <!-- 文本日志 致命错误 -->
    <!--<logger name="logfatal">
      <level value="Fatal"/>
      <appender-ref ref="RollingFileAppender_Fatal"/>
    </logger>-->

    <!-- 文本日志 统一记录 -->
    <!--<logger name="logall">
      <level value="all"/>
      <appender-ref ref="RollingFileAppender_Log"/>
    </logger>-->
    
    
    <!-- 
    AdoNetAppender：利用ADO.NET记录到数据库的日志。
    ConsoleAppender：将日志输出到控制台。
    RollingFileAppender：将日志以回滚文件（重复操作原始文件）的形式写到文件中。
    -->
    <!-- 控制台显示日志 -->
    <appender name="MyColoredConsoleAppender" type="log4net.Appender.ColoredConsoleAppender">
      <!-- 设置不同级别控制台显示的不同颜色 -->
      <mapping>
        <level value="INFO" />
        <foreColor value="Green" />
      </mapping>
      <mapping>
        <level value="ERROR" />
        <foreColor value="Red, HighIntensity" />
      </mapping>
      <!-- 记录的格式。 -->
      <layout type="log4net.Layout.PatternLayout">
        <!--<conversionPattern value="%date{HH:mm:ss,fff} [%-5level] %m %n" />-->
        <conversionPattern value="%n＝＝＝＝＝＝＝＝＝＝
              %n【日志级别】%-5level
              %n【记录时间】%date
              %n【线程编号】[%thread]
              %n【执行时间】[%r]毫秒
              %n【出错文件】%F
              %n【出错行号】%L
              %n【出错的类】%logger 属性[%property{NDC}]
              %n【错误描述】%message
              %n【错误详情】"/>
      </layout>
      <!-- 
      过滤器type有如下几种类型
      log4net.Filter.DenyAllFilter        丢弃所有日志事件。
      log4net.Filter.LevelMatchFilter      准确匹配事件等级。
      log4net.Filter.LevelRangeFilter      匹配一个范围的等级。
      log4net.Filter.LoggerMatchFilter    匹配一个日志器名字的开始。
      log4net.Filter.PropertyFilter        匹配指定属性名称的子字符串。
      log4net.Filter.StringMatchFilter    匹配事件消息的子字符串。
      -->
      <filter type="log4net.Filter.LevelRangeFilter">
        <!-- 控制输出日志的级别范围 -->
        <param name="LevelMin" value="Info" />
        <param name="LevelMax" value="Error" />
      </filter>
    </appender>

    <!-- 文件形式记录日志-Error -->
    <appender name="RollingFileAppender_Error" type="log4net.Appender.RollingFileAppender">
      <!--日志文件路径,按文件大小方式输出时在这里指定文件名，并且前面的日志按天在文件名后自动添加当天日期形成文件-->
      <param name= "File" value= "Logs\\Errors\\"/>
      <!--是否是向文件中追加日志-->
      <param name= "AppendToFile" value= "true"/>
      <!--记录日志写入文件时，不锁定文本文件-->
      <!--<lockingModel type="log4net.Appender.FileAppender+MinimalLock" />-->
      <!--Unicode编码-->
      <!--<Encoding value="UTF-8" />-->
      <!--最多产生的日志文件数，value="－1"为不限文件数-->
      <!--<param name="MaxSizeRollBackups" value="10" />-->
      <!--log保留天数-->
      <param name= "MaxSizeRollBackups" value= "10"/>
      <!--日志文件名是否是固定不变的（是否只写到一个文件中）-->
      <param name= "StaticLogFileName" value= "false"/>
      <!--按日期产生文件夹，文件名［在日期方式与混合方式下使用］日志文件名格式为:2008-08-31.log -->
      <param name= "DatePattern" value= "yyyy-MM-dd&quot;Error.log&quot;"/>
      <!--<param name="DatePattern" value="yyyy-MM-dd/"-ReflectionLayout.log=""""  />
      <param name="DatePattern" value="yyyyMMdd/yyyyMMdd"-TimerServer.log""  />
      <param name="DatePattern" value="yyyyMMdd/"TimerServer/TimerServer.log""  />-->
      <!--按照何种方式产生多个日志文件(日期[Date],文件大小[Size],混合[Composite])-->
      <param name="RollingStyle" value="Date" />
      <!--每个文件的大小。只在混合方式与文件大小方式下使用，超出大小的在文件名后自动增加1重新命名-->
      <param name="maximumFileSize" value="2000KB" />
      <!--记录的格式。-->
      <layout type="log4net.Layout.PatternLayout">
        <!--
        %d, %date     ：表示当然的时间
　　    %p, %level    ：表示日志的级别
　　    %c, %logger   ：表示日志产生的主题或名称，通常是所在的类名，便于定位问题
　　    %m, %message  ：表示日志的具体内容
　　    %n, %newline  ：换行
        %exception    ：表示异常信息
        %L：输出语句所在的行号 
        %F：输出语句所在的文件名 
        %newline :换行
        -->
        <!--<param name="ConversionPattern" value="%d [%t] %-5p %c - %m %logger %n" />-->
        <conversionPattern value="%n＝＝＝＝＝＝＝＝＝＝
              %n【日志级别】%-5level
              %n【记录时间】%date
              %n【线程编号】[%thread]
              %n【执行时间】[%r]毫秒
              %n【出错文件】%F
              %n【出错行号】%L
              %n【出错的类】%logger 属性[%property{NDC}]
              %n【错误描述】%message
              %n【错误详情】"/>
      </layout>
    </appender>
    <!-- 文件形式记录日志-Fatal -->
    <appender name="RollingFileAppender_Fatal" type="log4net.Appender.RollingFileAppender">
      <param name= "File" value= "Fatal\\"/>
      <!--是否是向文件中追加日志-->
      <param name= "AppendToFile" value= "true"/>
      <!--记录日志写入文件时，不锁定文本文件-->
      <!--<lockingModel type="log4net.Appender.FileAppender+MinimalLock" />-->
      <!--Unicode编码-->
      <!--<Encoding value="UTF-8" />-->
      <!--最多产生的日志文件数，value="－1"为不限文件数-->
      <!--<param name="MaxSizeRollBackups" value="10" />-->
      <!--log保留天数-->
      <param name= "MaxSizeRollBackups" value= "10"/>
      <!--日志文件名是否是固定不变的（是否只写到一个文件中）-->
      <param name= "StaticLogFileName" value= "false"/>
      <!--按日期产生文件夹，文件名［在日期方式与混合方式下使用］日志文件名格式为:2008-08-31.log -->
      <param name= "DatePattern" value= "yyyy-MM-dd&quot;Error.log&quot;"/>
      <!--<param name="DatePattern" value="yyyy-MM-dd/"-ReflectionLayout.log=""""  />
      <param name="DatePattern" value="yyyyMMdd/yyyyMMdd"-TimerServer.log""  />
      <param name="DatePattern" value="yyyyMMdd/"TimerServer/TimerServer.log""  />-->
      <!--按照何种方式产生多个日志文件(日期[Date],文件大小[Size],混合[Composite])-->
      <param name="RollingStyle" value="Date" />
      <!--每个文件的大小。只在混合方式与文件大小方式下使用，超出大小的在文件名后自动增加1重新命名-->
      <param name="maximumFileSize" value="500KB" />
      <!--记录的格式。-->
      <layout type="log4net.Layout.PatternLayout">
        <!--
        %d, %date     ：表示当然的时间
　　    %p, %level    ：表示日志的级别
　　    %c, %logger   ：表示日志产生的主题或名称，通常是所在的类名，便于定位问题
　　    %m, %message  ：表示日志的具体内容
　　    %n, %newline  ：换行
        %exception    ：表示异常信息
        %L：输出语句所在的行号 
        %F：输出语句所在的文件名 
        -->
        <!--<param name="ConversionPattern" value="%d [%t] %-5p %c - %m %logger %n" />-->
        <conversionPattern value="%n＝＝＝＝＝＝＝＝＝＝
              %n【日志级别】%-5level
              %n【记录时间】%date
              %n【线程编号】[%thread]
              %n【执行时间】[%r]毫秒
              %n【出错文件】%F
              %n【出错行号】%L
              %n【出错的类】%logger 属性[%property{NDC}]
              %n【错误描述】%message
              %n【错误详情】%newline"/>
      </layout>
    </appender>

    <!-- 文件形式记录日志-Info -->
    <appender name="RollingFileAppender_Info" type="log4net.Appender.RollingFileAppender">
      <!--日志文件路径,按文件大小方式输出时在这里指定文件名，并且前面的日志按天在文件名后自动添加当天日期形成文件-->
      <param name= "File" value= "Logs\\Info\\"/>
      <!--是否是向文件中追加日志-->
      <param name= "AppendToFile" value= "true"/>
      <!--记录日志写入文件时，不锁定文本文件-->
      <!--<lockingModel type="log4net.Appender.FileAppender+MinimalLock" />-->
      <!--Unicode编码-->
      <!--<Encoding value="UTF-8" />-->
      <!--最多产生的日志文件数，value="－1"为不限文件数-->
      <!--<param name="MaxSizeRollBackups" value="10" />-->
      <!--log保留天数-->
      <param name= "MaxSizeRollBackups" value= "10"/>
      <!--日志文件名是否是固定不变的（是否只写到一个文件中）-->
      <param name= "StaticLogFileName" value= "false"/>
      <!--按日期产生文件夹，文件名［在日期方式与混合方式下使用］日志文件名格式为:2008-08-31.log -->
      <param name= "DatePattern" value= "yyyy-MM-dd&quot;Monitor.log&quot;"/>
      <!--<param name="DatePattern" value="yyyy-MM-dd/"-ReflectionLayout.log=""""  />
      <param name="DatePattern" value="yyyyMMdd/yyyyMMdd"-TimerServer.log""  />
      <param name="DatePattern" value="yyyyMMdd/"TimerServer/TimerServer.log""  />-->
      <!--按照何种方式产生多个日志文件(日期[Date],文件大小[Size],混合[Composite])-->
      <param name="RollingStyle" value="Date" />
      <!--每个文件的大小。只在混合方式与文件大小方式下使用，超出大小的在文件名后自动增加1重新命名-->
      <param name="maximumFileSize" value="500KB" />
      <!--记录的格式。-->
      <layout type="log4net.Layout.PatternLayout">
        <!--
        %d, %date     ：表示当然的时间
　　    %p, %level    ：表示日志的级别
　　    %c, %logger   ：表示日志产生的主题或名称，通常是所在的类名，便于定位问题
　　    %m, %message  ：表示日志的具体内容
　　    %n, %newline  ：换行
        %exception    ：表示异常信息
        %L：输出语句所在的行号 
        %F：输出语句所在的文件名 
        -->
        <!--<param name="ConversionPattern" value="%d [%t] %-5p %c - %m %logger %n" />-->
        <conversionPattern value="%n＝＝＝＝＝＝＝＝＝＝
              %n【日志级别】%-5level
              %n【记录时间】%date
              %n【线程编号】[%thread]
              %n【执行时间】[%r]毫秒 
              %n【执行的类】%logger 属性[%property{NDC}]
              %n【提示信息】%message"/>
      </layout>
    </appender>

    <!-- name属性指定其名称,type则是log4net.Appender命名空间的一个类的名称,意思是,指定使用哪种介质    -->
    <!-- 数据库日志-Debug（每一个appender节点，代表一个记录日志的方式）  -->
    <appender name="AdoNetAppender_ERROR" type="log4net.Appender.AdoNetAppender">
      <!--日志缓存写入条数 设置为0时只要有一条就立刻写到数据库 生产环境可改为10-100写入一次-->
      <bufferSize value="0" />
      <!-- 日志数据库连接类型（此处写错会导致无法写入数据库） -->
      <connectionType value="System.Data.SqlClient.SqlConnection, System.Data, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
      <!-- 日志数据库连接字符串 -->
      <connectionString value="Server=115.239.189.70,41;DataBase=HrEva; User ID=sa;Password=Sa123"/>
      <!-- 日志数据库执行SQL语句 -->
      <commandText value="INSERT INTO ApplicationLog(LogDate, LogLevel, Logger, Message, StackTrace)VALUES(@logdate, @loglevel, @logger, @message, @stacktrace)"/>
      <!-- 参数-日志时间 -->
      <parameter>
        <parameterName value="@logdate" />
        <dbType value="DateTime" />
        <layout type="log4net.Layout.RawTimeStampLayout"/>
      </parameter>
      <!-- 参数-日志级别 -->
      <parameter>
        <parameterName value="@loglevel" />
        <dbType value="String" />
        <size value="200" />
        <layout type="log4net.Layout.PatternLayout">
          <conversionPattern value="%p" />
        </layout>
      </parameter>
      <!-- 参数-日志名称 -->
      <parameter>
        <parameterName value="@logger" />
        <dbType value="String" />
        <size value="500" />
        <layout type="log4net.Layout.PatternLayout">
          <conversionPattern value="%c" />
        </layout>
      </parameter>
      <!-- 参数-日志内容（size是最大长度，超出则直接去到该长度的内容） -->
      <parameter>
        <parameterName value="@message" />
        <dbType value="String" />
        <size value="2000" />
        <layout type="log4net.Layout.PatternLayout">
          <conversionPattern value="%m" />
        </layout>
      </parameter>
      <!-- 参数-异常内容（Exception会记录异常的所有信息，如：System.NullReferenceException: 未将对象引用设置到对象的实例。
   在 TestLog4Net.Program.Main(String[] args) 位置 d:\TestDemo_Tyh\TestLog4Net\TestLog4Net\Program.cs:行号 41） -->
      <parameter>
        <parameterName value="@stacktrace"/>
        <dbType value="String"/>
        <size value="2000"/>
        <layout type="log4net.Layout.ExceptionLayout"/>
      </parameter>
    </appender>
    <!-- 数据库日志-Info -->
    <appender name="AdoNetAppender_Info" type="log4net.Appender.AdoNetAppender">
      <!-- 表示是记录10条到缓冲区，满10条后再写入SQL server 调试时可以改为1，实际应用建议为100 -->
      <bufferSize value="0" />
      <!-- 数据库连接类型 -->
      <connectionType value="System.Data.SqlClient.SqlConnection, System.Data, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
      <!-- 数据库连接字符串 -->
      <connectionString value="Server=115.239.189.70,41;DataBase=HrEva; User ID=sa;Password=Sa123"/>
      <!-- 执行SQL语句 -->
      <commandText value="INSERT INTO ApplicationLog(LogDate, LogLevel, Logger, Message, StackTrace)VALUES(@logdate, @loglevel, @logger, @message, @stacktrace)"/>
      <!-- 参数赋值 -->
      <parameter>
        <parameterName value="@logdate" />
        <dbType value="DateTime" />
        <layout type="log4net.Layout.RawTimeStampLayout"/>
      </parameter>
      <parameter>
        <parameterName value="@loglevel" />
        <dbType value="String" />
        <size value="200" />
        <layout type="log4net.Layout.PatternLayout">
          <conversionPattern value="%p" />
        </layout>
      </parameter>
      <parameter>
        <parameterName value="@logger" />
        <dbType value="String" />
        <size value="500" />
        <layout type="log4net.Layout.PatternLayout">
          <conversionPattern value="%logger" />
        </layout>
      </parameter>
      <parameter>
        <parameterName value="@message" />
        <dbType value="String" />
        <size value="2000" />
        <layout type="log4net.Layout.PatternLayout">
          <conversionPattern value="%m" />
        </layout>
      </parameter>
      <parameter>
        <parameterName value="@stacktrace"/>
        <dbType value="String"/>
        <size value="2000"/>
        <layout type="log4net.Layout.ExceptionLayout"/>
      </parameter>
    </appender>



    <!-- 文件形式记录日志-Error -->
    <appender name="MyRollingFileAppender" type="log4net.Appender.RollingFileAppender">
      <!--日志文件路径,按文件大小方式输出时在这里指定文件名，并且前面的日志按天在文件名后自动添加当天日期形成文件-->
      <param name= "File" value= "Logs\\"/>
      <!--是否是向文件中追加日志-->
      <param name= "AppendToFile" value= "true"/>
      <!--记录日志写入文件时，不锁定文本文件-->
      <!--<lockingModel type="log4net.Appender.FileAppender+MinimalLock" />-->
      <!--Unicode编码-->
      <!--<Encoding value="UTF-8" />-->
      <!--最多产生的日志文件数，value="－1"为不限文件数-->
      <!--<param name="MaxSizeRollBackups" value="10" />-->
      <!--log保留天数-->
      <param name= "MaxSizeRollBackups" value= "100"/>
      <!--日志文件名是否是固定不变的（是否只写到一个文件中）-->
      <param name= "StaticLogFileName" value= "false"/>
      <!--按日期产生文件夹，文件名［在日期方式与混合方式下使用］日志文件名格式为:2008-08-31.log -->
      <param name= "DatePattern" value= "yyyy-MM-dd&quot;.log&quot;"/>
      <!--<param name="DatePattern" value="yyyy-MM-dd/"-ReflectionLayout.log=""""  />
      <param name="DatePattern" value="yyyyMMdd/yyyyMMdd"-TimerServer.log""  />
      <param name="DatePattern" value="yyyyMMdd/"TimerServer/TimerServer.log""  />-->
      <!--按照何种方式产生多个日志文件(日期[Date],文件大小[Size],混合[Composite])-->
      <param name="RollingStyle" value="Date" />
      <!--每个文件的大小。只在混合方式与文件大小方式下使用，超出大小的在文件名后自动增加1重新命名-->
      <param name="maximumFileSize" value="2000KB" />
      <!--记录的格式。-->
      <layout type="log4net.Layout.PatternLayout">  
        <conversionPattern value="%n＝＝＝＝＝＝＝＝＝＝
              %n【日志级别】%-5level
              %n【记录时间】%date
              %n【线程编号】[%thread]
              %n【执行时间】[%r]毫秒
              %n【出错文件】%F
              %n【出错行号】%L
              %n【出错的类】%logger 属性[%property{NDC}]
              %n【错误描述】%message
              %n【错误详情】"/>
      </layout>
    </appender>

  </log4net>
</configuration>